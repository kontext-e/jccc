<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.4">

    <group id="jccc.asciidoc:Default">
        <includeConcept refId="jccc.asciidoc:*"/>
        <includeConstraint refId="jccc.asciidoc:*"/>
    </group>

    <concept id="jccc.asciidoc:TechnicalDebt" severity="info">
        <description>Creates a relationship between two Packages for Technical Debt.</description>
        <cypher><![CDATA[
            MATCH
                (table:Asciidoc:Table)-->(attribute1:Asciidoc:Attribute),
                (table)-->(attribute2:Asciidoc:Attribute),
                (table)-[:HAS_ROW]->(body)
            WHERE
                attribute1.name="architecture" AND attribute1.value="technical_debt"
            AND
                attribute2.name="diagram_type" AND attribute2.value="package"
            WITH
                body
            MATCH
                (body)-[:CONTAINS_CELL]->(fromCell:Asciidoc:Cell {colnumber: 0}),
                (body)-[:CONTAINS_CELL]->(toCell:Asciidoc:Cell {colnumber: 1})
            WITH
                fromCell, toCell
            MATCH
                (jp1:Java:Package), (jp2:Java:Package)
            WHERE
                jp1.fqn = fromCell.text
            AND
                jp2.fqn = toCell.text
            MERGE
                (jp1)-[:TECHNICAL_DEBT]->(jp2)
            RETURN
                jp1.fqn, jp2.fqn
        ]]></cypher>
    </concept>

    <concept id="jccc.asciidoc:PMD" severity="info">
        <description>Enrich Asciidoc cells for PMD constraints.</description>
        <cypher><![CDATA[
            MATCH
                (a:Asciidoc:Table)-[:HAS_ROW]->(body),
                (a)-[:HAS_ATTRIBUTE]->(att:Asciidoc:Attribute)
            WHERE
                att.name='metric' AND toLower(att.value) = 'pmd'
            WITH
                body
            MATCH
                (body)-[:CONTAINS_CELL]->(prioCell:Asciidoc:Cell {colnumber: 0}),
                (body)-[:CONTAINS_CELL]->(thresholdCell:Asciidoc:Cell {colnumber: 1})
            SET
                prioCell:Pmd:Priority:Metric,
                thresholdCell:Pmd:Threshold:Metric,
                prioCell.priority = toInt(prioCell.text),
                thresholdCell.threshold = toInt(thresholdCell.text)
            CREATE UNIQUE
                (prioCell)-[:HAS_UPPER_THRESHOLD]->(thresholdCell)
            RETURN
                prioCell, thresholdCell
        ]]></cypher>
    </concept>

    <concept id="jccc.asciidoc:Checkstyle" severity="info">
        <description>Enrich Asciidoc cells for Checkstyle constraints.</description>
        <cypher><![CDATA[
            MATCH
                (a:Asciidoc:Table)-[:HAS_ROW]->(body),
                (a)-[:HAS_ATTRIBUTE]->(att:Asciidoc:Attribute)
            WHERE
                att.name='metric' AND toLower(att.value) = 'checkstyle'
            WITH
                body
            MATCH
                (body)-[:CONTAINS_CELL]->(prioCell:Asciidoc:Cell {colnumber: 0}),
                (body)-[:CONTAINS_CELL]->(thresholdCell:Asciidoc:Cell {colnumber: 1})
            SET
                prioCell:Checkstyle:Priority:Metric,
                thresholdCell:Checkstyle:Threshold:Metric,
                prioCell.priority = prioCell.text,
                thresholdCell.threshold = toInt(thresholdCell.text)
            CREATE UNIQUE
                (prioCell)-[:HAS_UPPER_THRESHOLD]->(thresholdCell)
            RETURN
                prioCell, thresholdCell
        ]]></cypher>
    </concept>

    <concept id="jccc.asciidoc:SpotBugs" severity="info">
        <description>Enrich Asciidoc cells for SpotBugs constraints.</description>
        <cypher><![CDATA[
            MATCH
                (a:Asciidoc:Table)-[:HAS_ROW]->(body),
                (a)-[:HAS_ATTRIBUTE]->(att:Asciidoc:Attribute)
            WHERE
                att.name='metric' AND toLower(att.value) = 'spotbugs'
            WITH
                body
            MATCH
                (body)-[:CONTAINS_CELL]->(prioCell:Asciidoc:Cell {colnumber: 0}),
                (body)-[:CONTAINS_CELL]->(thresholdCell:Asciidoc:Cell {colnumber: 1})
            SET
                prioCell:SpotBugs:Priority:Metric,
                thresholdCell:SpotBugs:Threshold:Metric,
                prioCell.priority = toInt(prioCell.text),
                thresholdCell.threshold = toInt(thresholdCell.text)
            CREATE UNIQUE
                (prioCell)-[:HAS_UPPER_THRESHOLD]->(thresholdCell)
            RETURN
                prioCell, thresholdCell
        ]]></cypher>
    </concept>

</jqa:jqassistant-rules>
